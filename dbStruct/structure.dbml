// DBML for Nuxt3 Multi-Tenant Authentication (Decoupled Frontend/Backend with UUIDs)
// Following Laravel Table Design Conventions
// Current Date: May 9, 2025

Project "Nuxt3 Multi-Tenant App - Decoupled UUIDs" {
  database_type: "PostgreSQL" // or "MySQL", "SQLite", "SQLServer"
  Note: "Schema for a multi-tenant application with user authentication, designed for a decoupled frontend and backend. Users and Tenants tables use UUID for IDs. Sessions table is omitted in favor of token-based auth."
}

// Core User Table
Table users {
  id uuid [pk, not null, note: "Primary key for the user (UUID). Generated by application or database function e.g., gen_random_uuid() for PostgreSQL."]
  name varchar [not null]
  email varchar [unique, not null]
  email_verified_at timestamp [null]
  password varchar [not null]
  remember_token varchar(100) [null, note: "Useful if parts of the backend have web routes, otherwise less critical for pure API"]
  last_active_tenant_id uuid [null, note: "FK to tenants.id, stores the last tenant the user was active in"]
  created_at timestamp [null, default: `now()`]
  updated_at timestamp [null, default: `now()`]
  deleted_at timestamp [null, note: "For soft deletes"]

  indexes {
    (email) [unique]
    (last_active_tenant_id)
  }
}

// Tenants (Companies) Table
Table tenants {
  id uuid [pk, not null, note: "Primary key for the tenant/company (UUID). Generated by application or database function."]
  name varchar [not null, note: "Name of the company/tenant"]
  slug varchar [unique, not null, note: "URL-friendly identifier for the tenant"]
  domain varchar [unique, null, note: "Optional custom domain or subdomain for the tenant"]
  owner_id uuid [null, note: "FK to users.id, designates the primary owner/creator of the tenant"]
  created_at timestamp [null, default: `now()`]
  updated_at timestamp [null, default: `now()`]
  deleted_at timestamp [null, note: "For soft deletes"]

  indexes {
    (slug) [unique]
    (domain) [unique]
    (owner_id)
  }
}

// Pivot Table for Many-to-Many Relationship between Users and Tenants
Table tenant_user {
  id bigint [pk, increment, not null, note: "Primary key for the pivot table entry (auto-incrementing integer)"]
  user_id uuid [not null, note: "FK to users.id"]
  tenant_id uuid [not null, note: "FK to tenants.id"]
  role varchar [null, note: "Role of the user within this specific tenant (e.g., admin, member, editor)"]
  joined_at timestamp [not null, default: `now()`]
  created_at timestamp [null, default: `now()`]
  updated_at timestamp [null, default: `now()`]

  indexes {
    (user_id, tenant_id) [unique, name: "idx_tenant_user_user_tenant_unique"] // Ensures a user is only linked to a tenant once
    (user_id)
    (tenant_id)
    (role)
  }
}

// Laravel Standard Password Reset Tokens Table
Table password_reset_tokens {
  email varchar [pk, not null, note: "User's email address, part of primary key"]
  token varchar [not null, note: "The password reset token"]
  created_at timestamp [null, default: `now()`]

  indexes {
    (email) // Primary key in Laravel, indexed for fast lookups
    (token) // For quick token validation
  }
}

// Laravel Sanctum Personal Access Tokens Table (for API authentication)
Table personal_access_tokens {
  id bigint [pk, increment, not null]
  tokenable_type varchar [not null, note: "Polymorphic relation: Model type (e.g., App\\Models\\User)"]
  tokenable_id uuid [not null, note: "Polymorphic relation: Model ID (UUID if related to users table)"]
  name varchar [not null, note: "User-defined name for the token (e.g., 'nuxt-app-token')"]
  token varchar(64) [unique, not null, note: "The hashed token value"]
  abilities text [null, note: "JSON array of abilities/permissions granted by the token"]
  last_used_at timestamp [null]
  expires_at timestamp [null]
  created_at timestamp [null, default: `now()`]
  updated_at timestamp [null, default: `now()`]

  indexes {
    (tokenable_type, tokenable_id)
    (token) [unique]
  }
}

// Laravel Standard Failed Jobs Table (for queue workers)
Table failed_jobs {
  id bigint [pk, increment, not null]
  uuid varchar [unique, not null, note: "This is a UUID string for the job itself, not a PK type UUID."]
  connection text [not null]
  queue text [not null]
  payload long_text [not null]
  exception long_text [not null]
  failed_at timestamp [not null, default: `now()`]

  indexes {
    (uuid) [unique]
  }
}

// Laravel Standard Jobs Table (for queue workers)
Table jobs {
  id bigint [pk, increment, not null]
  queue varchar [not null]
  payload long_text [not null]
  attempts tinyint [not null, note: "Or integer. Represents number of attempts."]
  reserved_at integer [null, note: "Timestamp or integer representing reservation time"]
  available_at integer [not null, note: "Timestamp or integer representing availability time"]
  created_at integer [not null, note: "Timestamp or integer representing creation time"]

  indexes {
    (queue)
    (reserved_at)
  }
}


// --- Relationships ---

// User to Tenant (via last_active_tenant_id)
Ref fk_users_last_active_tenant: users.last_active_tenant_id > tenants.id [delete: set null, update: cascade]

// Tenant to User (Owner)
Ref fk_tenants_owner: tenants.owner_id > users.id [delete: set null, update: cascade]

// Tenant_User Pivot Table Relationships
Ref fk_tenant_user_user: tenant_user.user_id > users.id [delete: cascade, update: cascade]
Ref fk_tenant_user_tenant: tenant_user.tenant_id > tenants.id [delete: cascade, update: cascade]

// Personal Access Tokens Polymorphic Relationship
// Ref: personal_access_tokens.(tokenable_type, tokenable_id) > users.id (when tokenable_type is 'App\\Models\\User' and tokenable_id is users.id (UUID))
// Note: The type of tokenable_id is now UUID to match users.id.

// Password Reset Tokens to Users (conceptual, based on email)
// Ref: password_reset_tokens.email > users.email
